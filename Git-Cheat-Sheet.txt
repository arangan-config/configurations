GIT -- Cheat Sheet
-------------------

Basic
-------
$ git status   # Get the status of the repo

$ git pull = git fetch + git merge

$ git fetch origin branch

$ git checkout --track origin/[branch]  -- when a remote branch needs to be checked out and tracked


STAGING
--------

$ git add -A   -- stages All

$ git add .    -- stages new and modified, without deleted

$ git add -u   -- stages modified and deleted, without new

$ git checkout --   Reverting  / Unstage


BRANCHING
---------

$ git branch   ## Shows current branch
$ git branch -a   ## Shows all the branches

$ git checkout [foo]     # will change current branch to foo

$ git branch --contains <commit_hash>   --  Only list (local) branches which contain the specified commit.
$ git branch -r --contains <commit_hash> --  List (remote) branches which contain the specified commit.

Delete Branch --
$ git branch -d <branch_name>  ## delete local branch
$ git push origin --delete <branch_name>   ## delete remote branch on server


REMOVE stale Branches  ( when a branch is removed from remote but exists in the local remote-tracking branch )
---------------------
$ git remote prune origin    ## Removes all stale branches

$ git branch -d -r origin/stale_branch    ## Removes a specific branch

MERGING
----------
$ git merge [some_other_branch]  -- will merge [some_other_branch] to the current branch


UNDO MERGE NOT YET PUSHED
----------------------------
$ git merge --abort    -- This will roll back all merges, if COMMIT has NOT been called.

$ git reset --hard Commit_hash_SHA    -- If changes have been COMMITED, this will roll back to the previous commit level.

$ git reset --hard HEAD~1   -- will get you back 1 commit.


UNDO PUSHED MERGE 
-------------------
$ git revert -m 1 Commit_hash_SHA    -- To undo a merge that was already pushed:


UNDO A COMMIT AND REDO
------------------------

$ git commit -m "Something terribly misguided"              (1)
$ git reset HEAD~                                           (2)
<< edit files as necessary >>                               (3)
$ git add ...                                               (4)
$ git commit -c ORIG_HEAD                                   (5)


File DIFF and MERGE
---------------
$ git diff   or $ git difftool

$ git mergetool   -- this will fireup the mergetool (kdiff3) or another other configured
				  -- finally remove all the .orig files or the .bak files left over from the merge

$ git clean -- remove *.orig files


GRAPH
----------
$ git log --graph --oneline --decorate --all
-- or
$ git log --graph --abbrev-commit --decorate --date=relative --all

FIND
------------
git log --follow -- [filename]       ## This will show the list of commits where this file was changed.
git rev-parse --abbrev-ref HEAD     ## Return Current branch name

CONFIG
-------
$ git remote show origin
$ git remote -v
$ git config --list   #list the configuration of the current repo
$ git config --list --show-origin  [--local|--global|--system]

-- Git will use Local/System/Global in that order, based on availability of key values.
git config --local user.name "Foo"
git config --local user.email "Foo@foo.com"
git config --system user.email "Foo@foo.com"
git config --global user.email "Foo@foo.com"


Credentials
------------
$ git config credential.helper manager  ## this might work with windows. Store seems to be storing passwords in clear text at ~/.gitconfig
$ git config credential.helper store
$ git push https://github.com/repo.git

Username for 'https://github.com': <USERNAME>
Password for 'https://USERNAME@github.com': <PASSWORD>

$ git config --global credential.helper 'cache --timeout 7200'  -- 7200 in seconds
